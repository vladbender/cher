#!/bin/bash

# Set to any value to print debug info
# e.g. CHER_DEBUG="yes"
CHER_DEBUG=""

debug () {
  if [[ $# -ne 1 ]]
  then
    echo "debug applies only 1 argument"
    exit 1
  fi
  if [[ -n "$CHER_DEBUG" ]]
  then
    echo $1
  fi
}

help () {
  echo 'Usage: cher [ run | repl | shell ] [OPTIONS]'
  echo ''
  echo 'run command:'
  echo '  runs code in chosen language and prints '
  echo '  output to the command line'
  echo ''
  echo '  cher run path/to/file.js'
  echo ''
  echo '  Supported languages:'
  echo '    - JavaScript (Node.js)'
  echo '    - TypeScript (Node.js)'
  echo '    - Golang'
  echo '    - Rust'
  echo '    - Python'
  echo '    - Ruby'
  echo '    - Java'
  echo '    - C/C++'
  echo '    - PHP'
  echo '    - Haskell'
  echo ''
  echo '  Examples:'
  echo '    cher r path/to/file.go'
  echo '    cher r ../../path/to/file.py'
  echo '    cher r /usr/tmp/path/to/File.java'
  echo ''
  echo 'repl command:'
  echo '  runs REPL (read-eval-print-loop) in languages that have it'
  echo ''
  echo '  cher repl ruby'
  echo ''
  echo '  Supported languages:'
  echo '    - JavaScript'
  echo '    - Python'
  echo '    - Ruby'
  echo '    - PHP'
  echo '    - Haskell'
  echo ''
  echo '  Examples:'
  echo '    cher repl node'
  echo '    cher e python'
  echo '    cher e ruby'
  echo '    cher e php'
  echo '    cher e haskell'
  echo ''
  echo 'shell command:'
  echo '  runs cli in docker container.'
  echo '  In that cli you will have access to all tools'
  echo '  in the chosen language.'
  echo '  All files of the current directory are placed'
  echo '  on `/workdir` path'
  echo ''
  echo '  cher shell rust'
  echo '  cd /workdir'
  echo '  rustc ...'
  echo ''
  echo '  After language you can pass port mapping'
  echo '  in docker format - allowed all that applies -p option:'
  echo ''
  echo '  cher shell go 3000:4000'
  echo ''
  echo '  Supported languages:'
  echo '    - JavaScript (Node.js)'
  echo '    - Golang'
  echo '    - Rust'
  echo '    - Python'
  echo '    - Ruby'
  echo '    - Java'
  echo '    - C/C++'
  echo '    - PHP'
  echo '    - Haskell'
  echo ''
  echo '  Examples:'
  echo '    cher shell node 3000:3000'
  echo '    cher sh go 3000:8080'
  echo '    cher sh rust'
  echo '    cher sh python'
  echo '    cher sh ruby'
  echo '    cher sh java'
  echo '    cher sh c'
  echo '    cher sh c++'
  echo '    cher sh php'
  echo '    cher sh haskell'
}

error () {
  echo $1
  echo
  echo "For help run:"
  echo "  cher"
  echo "  cher -h"
  echo "  cher --help"
  exit 1
}

run () {
  FILEPATH=$1

  if [[ ! -e $FILEPATH ]]
  then
    error "File $FILEPATH doesn't exist"
  fi

  if [[ ! -f $FILEPATH ]]
  then
    error "$FILEPATH isn't a file"
  fi

  if [[ $FILEPATH == /* ]]
  then
    ABSOLUTE_FILEPATH=$FILEPATH
  else
    ABSOLUTE_FILEPATH=$(realpath "`pwd`/$FILEPATH")
  fi

  FILENAME=$(basename "$ABSOLUTE_FILEPATH")
  EXTENSION="${FILENAME##*.}"
  FILENAME="${FILENAME%.*}"

  case $EXTENSION in
    "js")
      IMAGE="node:lts-alpine"
      COMMAND="node /app/$FILENAME.js"
      ;;
    "ts")
      IMAGE="node:lts-alpine"
      COMMAND="cd /app && npm i typescript &> /dev/null && node_modules/.bin/tsc $FILENAME.ts && node $FILENAME.js"
      ;;
    "go")
      IMAGE="golang:alpine"
      COMMAND="cd /app && go run $FILENAME.go"
      ;;
    "rs")
      IMAGE="rust:alpine"
      COMMAND="cd /app && rustc $FILENAME.rs && ./main"
      ;;
    "py")
      IMAGE="python:alpine"
      COMMAND="python3 /app/$FILENAME.py"
      ;;
    "rb")
      IMAGE="ruby:alpine"
      COMMAND="ruby /app/$FILENAME.rb"
      ;;
    "java")
      IMAGE="amazoncorretto:17"
      COMMAND="cd /app && javac $FILENAME.java && java $FILENAME"
      ;;
    "c")
      IMAGE="gcc:latest"
      COMMAND="cd /app && gcc -o main $FILENAME.c && ./main"
      ;;
    "cpp")
      IMAGE="gcc:latest"
      COMMAND="cd /app && g++ -o main $FILENAME.cpp && ./main"
      ;;
    "php")
      IMAGE="php:cli"
      COMMAND="php /app/$FILENAME.php"
      ;;
    "hs")
      IMAGE="haskell:9.4-slim"
      COMMAND="cd /app && ghc $FILENAME.hs && ./$FILENAME"
      ;;
    "")
      error "Specify path/to/file after run"
      ;;
    *)
      error "Unknown file $EXTENSION"
      ;;
  esac

  # Debug
  debug "IMAGE=$IMAGE"
  debug "FILEPATH=$FILEPATH"
  debug "FILENAME=$FILENAME"
  debug "EXTENSION=$EXTENSION"
  debug "COMMAND=$COMMAND"
  debug ""

  docker run \
    --rm \
    -it \
    -v $ABSOLUTE_FILEPATH:/app/$FILENAME.$EXTENSION \
    $IMAGE \
    sh -c "$COMMAND"
}

repl () {
  case $1 in
    "node"|"nodejs"|"node.js"|"js")
      IMAGE="node:lts-alpine"
      COMMAND="node"
      ;;
    "python"|"python3"|"py")
      IMAGE="python:alpine"
      COMMAND="python3"
      ;;
    "ruby"|"rb"|"irb")
      IMAGE="ruby:alpine"
      COMMAND="irb"
      ;;
    "php")
      IMAGE="php:cli"
      COMMAND="php -a"
      ;;
    "haskell"|"hs")
      IMAGE="haskell:9.4-slim"
      COMMAND="ghci"
      ;;
    "")
      error "Specify programming language after \"repl\""
      ;;
    *)
      error "There is not REPL mode for $1 language"
      ;;
  esac

  docker run \
    --rm \
    -it \
    $IMAGE \
    sh -c "$COMMAND" 
}

shell () {
  LANGUAGE=$1
  PORTS=$2

  case $LANGUAGE in
    "node"|"nodejs"|"node.js"|"js"|"javascript")
      IMAGE="node:lts-alpine"
      SHELL="sh"
      ;;
    "go"|"golang")
      IMAGE="golang:alpine"
      SHELL="sh"
      ;;
    "rust"|"rs")
      IMAGE="rust:alpine"
      SHELL="sh"
      ;;
    "python"|"python3"|"py")
      IMAGE="python:alpine"
      SHELL="sh"
      ;;
    "ruby"|"rb"|"irb")
      IMAGE="ruby:alpine"
      SHELL="sh"
      ;;
    "java"|"Java")
      IMAGE="amazoncorretto:17"
      SHELL="bash"
      ;;
    "c"|"C")
      IMAGE="gcc:latest"
      SHELL="bash"
      ;;
    "c++"|"C++"|"cpp")
      IMAGE="gcc:latest"
      SHELL="bash"
      ;;
    "php"|"PHP")
      IMAGE="php:cli"
      SHELL="bash"
      ;;
    "haskell"|"hs")
      IMAGE="haskell:9.4-slim"
      SHELL="bash"
      ;;
    "")
      error "Specify programming language after \"shell\""
      ;;
    *)
      error "There is no Shell for $LANGUAGE language"
      ;;
  esac

  if [[ -n "$PORTS" ]]
  then
    MAP_PORTS="-p $PORTS"
  fi

  docker run --rm -it \
    -v `pwd`:/workdir $MAP_PORTS \
    $IMAGE \
    $SHELL
}

# Start of script execution

if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]]
then
  help
  exit 0
fi

case $1 in
  "run"|"r")
    run $2
    ;;
  "repl"|"e")
    repl $2
    ;;
  "shell"|"sh")
    shell $2 $3
    ;;
  *)
    error "Unknown command $1"
    ;;
esac
